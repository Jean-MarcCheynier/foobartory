{"version":3,"sources":["features/robot/Robot.module.scss","features/factory/Factory.module.scss","features/robot/RobotIconActive.module.scss","utils/rules.ts","utils/RobotFactory.ts","features/factory/actionAPI.ts","features/counter/counterSlice.ts","features/factory/factorySlice.ts","features/robot/RobotIconActive.tsx","features/robot/ButtonChangeLine.tsx","features/robot/Robot.tsx","features/factory/line/Line.tsx","features/factory/line/BarMiningLine.tsx","features/factory/line/FooMiningLine.tsx","features/factory/line/withConstraint.tsx","features/factory/line/FoobarCraftingLine.tsx","features/factory/line/ShoppingLine.tsx","features/factory/line/BenchLine.tsx","features/factory/Factory.tsx","features/counter/Counter.tsx","features/factory/Dashboard.tsx","features/modal/ModalRules.tsx","features/modal/ModalVictory.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","rules","RobotFactory","mineFoo","newFoo","Promise","resolve","setTimeout","data","mineBar","newBar","miningTime","Math","random","createRobot","activity","LineEnum","BENCH","id","uuidv4","busy","changingActivity","initialState","count","start","interval","startCounter","dispatch","getState","setInterval","increment","stopCounter","clearInterval","counterSlice","createSlice","name","reducers","state","storeIntervalId","action","intervalId","payload","reset","actions","selectCount","counter","getInitialState","producing","robotMap","line","FOO_MINING","BAR_MINING","FOOBAR_CRAFTING","SHOPPING","prod","foo","bar","foobar","workshop","craft","craftAttempts","i","push","robot","changeLine","createAsyncThunk","args","a","startProduction","API","response","craftFoobar","thunkAPI","reject","buyRobot","factory","Object","entries","length","stopProduction","factorySlice","extraReducers","builder","addCase","pending","ref","meta","arg","fulfilled","Error","fooArray","splice","barArray","foos","bars","pop","rejected","failedCraft","reusableBar","newRobot","filter","selectLine","map","robotId","selectFooMiners","selectBarMiners","selectFoobarCrafters","selectShoppers","selectBench","selectAll","selectProd","selectWorkshop","isVictory","RobotIconActive","props","Component","classIcon","styles","RobotIcon","GiMiner","GiSolderingIron","FaShoppingCart","ImSpinner2","className","ButtonChangeLine","activeLine","onChangeLine","children","Button","aria-label","disabled","onClick","Robot","actionQueue","useRef","work","useCallback","undefined","actionToQueue","current","useEffect","nextAction","shift","Card","role","size","ButtonGroup","actionCreator","connect","robotList","activityName","index","actionCreators","BarMiningLine","Line","FooMiningLine","withConstraint","WrappedComponent","constraint","rest","allowActivity","useSelector","LineWithConstraint","FoobarCraftingLine","ShoppingLine","BenchLine","Row","Col","LineFooMining","LineBarMining","LineFoobarCrafting","LineShopping","LineBenching","mm","round","toString","ss","displayDigits","s","Container","ModalRules","useState","show","setShow","handleClose","Modal","onHide","Header","closeButton","Title","Body","Footer","variant","resetCounter","resetFactory","App","reducer","counterReducer","factoryReducer","store","configureStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3cd68f5c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Robot\":\"Robot_Robot__20z7S\",\"Robot-icon\":\"Robot_Robot-icon__3wKUB\",\"Robot-icon--fooMining\":\"Robot_Robot-icon--fooMining__JNAwy\",\"Robot-icon--barMining\":\"Robot_Robot-icon--barMining__1z6Ki\",\"Robot-icon--foobarCrafting\":\"Robot_Robot-icon--foobarCrafting__-lEC6\",\"Robot-icon--shopping\":\"Robot_Robot-icon--shopping__1GmDx\",\"Robot-icon--benching\":\"Robot_Robot-icon--benching__17nsq\",\"Robot-icon--changing\":\"Robot_Robot-icon--changing__fwp6y\",\"ButtonGroup\":\"Robot_ButtonGroup__p1Dbv\",\"Button\":\"Robot_Button__1V4TY\",\"Button--fooMining\":\"Robot_Button--fooMining__EA70g\",\"Button--barMining\":\"Robot_Button--barMining__2g9Eb\",\"Button--foobarCrafting\":\"Robot_Button--foobarCrafting__3mMBF\",\"Button--shopping\":\"Robot_Button--shopping__lDcRB\",\"Button--benching\":\"Robot_Button--benching__26Lra\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Line\":\"Factory_Line__2MebV\",\"LineFooMining\":\"Factory_LineFooMining__1LGpf\",\"LineBarMining\":\"Factory_LineBarMining__2urO2\",\"LineFoobarCrafting\":\"Factory_LineFoobarCrafting__2IPW5\",\"LineShopping\":\"Factory_LineShopping__2iTbF\",\"LineBenching\":\"Factory_LineBenching__1YwS7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RobotIcon\":\"RobotIconActive_RobotIcon__3Nvfs\",\"RobotIcon--fooMining\":\"RobotIconActive_RobotIcon--fooMining__2PeYP\",\"RobotIcon--barMining\":\"RobotIconActive_RobotIcon--barMining__wwH9S\",\"mineIn\":\"RobotIconActive_mineIn__3wpsZ\",\"mineOut\":\"RobotIconActive_mineOut__2wix_\",\"RobotIcon--spinning\":\"RobotIconActive_RobotIcon--spinning__TzoZX\",\"spin\":\"RobotIconActive_spin__1edAg\"};","export const rules = {\n  ACTIVITY_SWAPPING_TIME : 5000,\n  FOO_MINING_TIME : 1000,\n  BAR_MINING_MIN_TIME : 600,\n  BAR_MINING_MAX_TIME : 2000,\n  FOOBAR_CRAFTING_TIME : 3000,\n  FOOBAR_CRAFTING_PRICE_FOO : 1,\n  FOOBAR_CRAFTING_PRICE_BAR : 1,\n  FOOBAR_CRAFTING_CHANCE : 0.6,\n  ROBOT_PRICE : 6,\n  NB_ROBOTS_START: 2,\n  NB_FOO_START: 0,\n  NB_BAR_START: 0,\n  VICTORY: 20\n}\n  \n","import { LineEnum } from '../features/factory/factorySlice';\nimport { IRobot } from './../interfaces/Robot';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport default class RobotFactory {\n\n    static createRobot = (activity = LineEnum.BENCH):IRobot  => {\n        return { \n            id: uuidv4(), \n            busy: false, \n            changingActivity: false, \n            activity: activity\n        }\n    }\n}","import { Bar } from \"../../interfaces/Bar\";\nimport { Foo } from \"../../interfaces/Foo\";\nimport { rules } from \"../../utils/rules\";\nimport { Foobar } from '../../interfaces/Foobar';\nimport { IRobot } from '../../interfaces/Robot';\nimport RobotFactory from './../../utils/RobotFactory';\n\n// A mock function to mimic making an async request for 'Foo' mining\nexport function mineFoo() {\n  const newFoo: Foo = {} \n  return new Promise<{ data: Foo }>((resolve) =>\n    setTimeout(() => resolve({ data: newFoo }), rules.FOO_MINING_TIME)\n  );\n}\n\n// A mock function to mimic making a request for 'Bar' mining\nexport function mineBar() {\n  const newBar: Bar = {}\n  return new Promise<{ data: Bar }>((resolve) => {\n    const miningTime = Math.random()*(rules.BAR_MINING_MAX_TIME - rules.BAR_MINING_MIN_TIME) + rules.BAR_MINING_MIN_TIME\n    setTimeout(() => resolve({ data: newBar }), miningTime)\n  });\n}\n\n// A mock function to mimic making a request for swapping activity\nexport function changeLine() {\n  return new Promise<void>((resolve) =>\n    setTimeout(() => resolve(), rules.ACTIVITY_SWAPPING_TIME)\n  );\n}\n\n// A mock function to mimic making a request for 'Foobar' crafting\nexport function craftFoobar() {\n  return new Promise<{ data: Foobar }>((resolve, reject) =>\n    setTimeout(() => {\n      const craftResult = Math.random();\n      const success = craftResult < rules.FOOBAR_CRAFTING_CHANCE;\n      if (success) {\n        const newFoobar: Foobar = {}\n        resolve({ data: newFoobar })\n      } else {\n        reject()\n      }\n    }, rules.FOOBAR_CRAFTING_TIME)\n  );\n}\n\n// A mock function to mimic making a request for 'Foobar' crafting\nexport function buyRobot() {\n  return new Promise<{ data: IRobot }>((resolve, reject) => {\n    resolve({ data: RobotFactory.createRobot() })\n  });\n}\n\n\n","import { createSlice} from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\n\nexport interface CounterState {\n  count: number;\n  start: boolean;\n  intervalId?: any;\n}\n\nconst initialState: CounterState = {\n  count: 0,\n  start: false\n};\n\nlet interval: NodeJS.Timeout | null = null;\n\n\nexport const startCounter = (): any => (  \n  dispatch: any,\n  getState: any\n) => {\n    if(!interval) {\n      interval = setInterval(() => {\n        dispatch(increment());\n      }, 1000);\n    }\n}\n\nexport const stopCounter = (): AppThunk => (  \n  dispatch,\n  getState\n) => {\n  if( interval ) {\n    clearInterval(interval)\n    interval = null;\n  } \n}\n\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      state.count += 1;\n    },\n    storeIntervalId: (state, action) => ({...state, intervalId: action.payload}),\n    reset: () => initialState\n  }\n});\n\nexport const { increment, storeIntervalId, reset } = counterSlice.actions;\nexport const selectCount = (state: RootState) => state.counter.count;\nexport default counterSlice.reducer;\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { AppDispatch, RootState } from '../../app/store';\nimport * as API from './actionAPI';\nimport { IRobot  } from '../../interfaces/Robot';\nimport { Foobar } from '../../interfaces/Foobar';\nimport { Foo } from '../../interfaces/Foo';\nimport { Bar } from '../../interfaces/Bar';\nimport { rules } from './../../utils/rules';\nimport RobotFactory from './../../utils/RobotFactory';\nimport { startCounter, stopCounter } from './../counter/counterSlice';\n\nexport enum LineEnum {\n  FOO_MINING = 'fooMining',\n  BAR_MINING = 'barMining',\n  FOOBAR_CRAFTING = 'foobarCrafting',\n  SHOPPING = 'shopping',\n  BENCH = 'benching'\n}\n\nexport interface FactoryState {\n  producing: boolean,\n  robotMap: { [robotId: string]: IRobot },\n  line: {\n    [LineEnum.FOO_MINING]: string[],\n    [LineEnum.BAR_MINING]: string[],\n    [LineEnum.FOOBAR_CRAFTING]: string[],\n    [LineEnum.SHOPPING]: string[],\n    [LineEnum.BENCH]: string[],\n\n  },\n  prod: {\n    foo: Foo[],\n    bar: Bar[],\n    foobar: Foobar[]\n  },\n  workshop: {\n    craft: {foos: Foo[], bars: Bar[]}[],\n    craftAttempts: number\n  }\n}\n\nconst getInitialState = (): FactoryState => {\n  const initialState:FactoryState  = {\n    producing: false,\n    robotMap: {\n    },\n    line: {\n      [LineEnum.FOO_MINING]: [],\n      [LineEnum.BAR_MINING]: [],\n      [LineEnum.FOOBAR_CRAFTING]: [],\n      [LineEnum.SHOPPING]: [],\n      [LineEnum.BENCH]: [],\n    },\n    prod: {\n      foo: [],\n      bar: [],\n      foobar: [],\n    },\n    workshop: {\n      craft: [],\n      craftAttempts: 0\n    }\n  }\n\n  for(let i =0; i < rules.NB_FOO_START; i++) {\n    initialState.prod.foo.push({})\n  }\n\n  for(let i =0; i < rules.NB_BAR_START; i++) {\n    initialState.prod.bar.push({})\n  }\n\n  for(let i =0; i < rules.NB_ROBOTS_START; i++) {\n    let robot:IRobot = RobotFactory.createRobot();\n    initialState.robotMap[robot.id] = robot;\n    initialState.line[LineEnum.BENCH].push(robot.id)\n  }\n\n  return initialState\n};\n\nexport const changeLine = createAsyncThunk(\n  'action/changeLine',\n  async (args: { robot: IRobot, line: LineEnum }, {dispatch}) => {\n    dispatch(startCounter())\n    dispatch(startProduction())\n    await API.changeLine();\n    // The value we return becomes the `fulfilled` action payload\n    return;\n  }\n);\n\nexport const mineFoo = createAsyncThunk(\n  'action/mineFoo',\n  async (args: { robot: IRobot }) => {\n    const response = await API.mineFoo();\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const mineBar = createAsyncThunk(\n  'action/mineBar',\n  async (args: { robot: IRobot }) => {\n    const response = await API.mineBar();\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const craftFoobar = createAsyncThunk(\n  'action/craftFoobar',\n  async (args: { robot: IRobot }, thunkAPI) => {\n    const response = await API.craftFoobar();\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\n\n\nexport const buyRobot = createAsyncThunk<\n  IRobot,\n  { robot: IRobot },\n  {\n    dispatch: AppDispatch,\n    state: RootState\n  }>(\n  'action/buyRobot',\n  async (args: { robot: IRobot }, {getState, dispatch}) => {\n    const response = await API.buyRobot();\n    // Check the condition of victory\n    const { factory } = getState()\n    if(Object.entries(factory.robotMap).length >= (rules.VICTORY - 1)) {\n      dispatch(stopProduction())\n      dispatch(stopCounter())\n    }\n    return response.data;\n  }\n);\n\nexport const factorySlice = createSlice({\n  name: 'factory',\n  initialState: getInitialState(),\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    reset: () => (getInitialState()),\n    startProduction: (state) => ({...state, producing: true }),\n    stopProduction: (state) => ({...state, producing: false  })\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      //Mine Foo Reducers\n      .addCase(mineFoo.pending, (state, action) => {\n        const { robot: ref } = action.meta.arg;\n        state.robotMap[ref.id].busy = true;\n      })\n      .addCase(mineFoo.fulfilled, (state, action) => {\n        const { robot: ref } = action.meta.arg;\n        state.prod.foo = [...state.prod.foo, action.payload];\n        state.robotMap[ref.id].busy = false;\n      })\n      //Mine Bar Reducers\n      .addCase(mineBar.pending, (state, action) => {\n        const { robot: ref } = action.meta.arg;\n        state.robotMap[ref.id].busy = true;\n      })\n      .addCase(mineBar.fulfilled, (state, action) => {\n        const { robot: ref } = action.meta.arg;\n        state.prod.bar = [...state.prod.bar, action.payload];\n        state.robotMap[ref.id].busy = false;\n      })\n      //Craft Foobar Reducers\n      .addCase(craftFoobar.pending, (state, action) => {\n        const { robot: ref } = action.meta.arg;\n        if(state.prod.bar.length < rules.FOOBAR_CRAFTING_PRICE_BAR || state.prod.bar.length < rules.FOOBAR_CRAFTING_PRICE_BAR) {\n          throw Error(\"Cannot perform reducer craftFoobar\")\n        }else{\n          state.robotMap[ref.id].busy = true;\n          const fooArray = state.prod.foo.splice(0, rules.FOOBAR_CRAFTING_PRICE_FOO);\n          const barArray = state.prod.bar.splice(0, rules.FOOBAR_CRAFTING_PRICE_BAR);   \n          state.workshop.craftAttempts++ \n          state.workshop.craft.push({foos: fooArray, bars: barArray }) \n        }\n      })\n      .addCase(craftFoobar.fulfilled, (state, action) => {\n        const { robot: ref } = action.meta.arg;\n        if(state.workshop.craft.length <= 0) {\n          //throw Error(\"No craft present in the workshop\")\n        }else{  \n          state.workshop.craft.pop() \n          state.prod.foobar.push({});\n        }\n        state.robotMap[ref.id].busy = false;\n      })\n      .addCase(craftFoobar.rejected, (state, action) => {\n        const { robot } = action.meta.arg;\n        if(state.workshop.craft.length <= 0) {\n          //throw Error(\"No craft present in the workshop\")\n        }else{  \n          const failedCraft = state.workshop.craft.pop();\n          if(failedCraft) {\n            const reusableBar = failedCraft.bars\n            state.prod.bar = [ ...state.prod.bar, ...reusableBar]\n          } else {\n            throw new Error(\"Cannot reuse Bar\")\n          }\n\n        }\n        state.robotMap[robot.id].busy = false;\n      })\n      //Buy robot Line Reducers\n      .addCase(buyRobot.pending, (state, action) => { \n        state.prod.foobar.splice(0, rules.ROBOT_PRICE)       \n      })\n      .addCase(buyRobot.fulfilled, (state, action) => { \n        const newRobot = RobotFactory.createRobot();\n        state.robotMap[newRobot.id] = newRobot;\n        state.line[LineEnum.BENCH].push(newRobot.id)     \n      })\n      //Change Line Reducers\n      .addCase(changeLine.pending, (state, action) => {\n        const { robot: ref, line } = action.meta.arg;\n        // Get the current robot state from robotMap\n        const robot = state.robotMap[ref.id];\n        if(robot.activity) {\n          state.line[robot.activity] = state.line[robot.activity].filter(id => id !== robot.id)\n        }\n        state.robotMap[robot.id] = { ...state.robotMap[robot.id], changingActivity: true, activity: line }\n        state.line[line].push(robot.id)\n      })\n      .addCase(changeLine.fulfilled, (state, action) => {\n        const { robot: ref, line } = action.meta.arg;\n        state.robotMap[ref.id] = { ...state.robotMap[ref.id], changingActivity: false, activity: line }\n      })\n  },\n});\n\nexport const { reset, startProduction, stopProduction } = factorySlice.actions;\n\n\n/**Selectors **/\nconst selectLine = (state: RootState, line: LineEnum): IRobot[] => {\n  return state.factory.line[line]\n    .map((robotId: string) => state.factory.robotMap[robotId])\n}\n// Robot selectors\nexport const selectFooMiners = (state: RootState) => selectLine(state, LineEnum.FOO_MINING)\nexport const selectBarMiners = (state: RootState) => selectLine(state, LineEnum.BAR_MINING)\nexport const selectFoobarCrafters = (state: RootState) => selectLine(state, LineEnum.FOOBAR_CRAFTING)\nexport const selectShoppers = (state: RootState) => selectLine(state, LineEnum.SHOPPING)\nexport const selectBench = (state: RootState) => selectLine(state, LineEnum.BENCH)\nexport const selectAll = (state: RootState) => state.factory.robotMap;\n\n// Production selector\nexport const selectProd = (state: RootState) => state.factory.prod;\nexport const selectWorkshop = (state: RootState) => state.factory.workshop;\n\n// Constraint selectors\nexport type Constraint = (state: RootState) => boolean;\nexport const canCraftFoobar:Constraint =  (state: RootState) => (\n  state.factory.prod.foo.length >= rules.FOOBAR_CRAFTING_PRICE_FOO && \n  state.factory.prod.bar.length >= rules.FOOBAR_CRAFTING_PRICE_BAR )\nexport const canBuyRobot:Constraint = (state: RootState) => ( state.factory.prod.foobar.length >= rules.ROBOT_PRICE )\nexport const isVictory:Constraint = (state: RootState) => ( Object.entries(state.factory.robotMap).length >= rules.VICTORY )\n\n\n\n\nexport default factorySlice.reducer;\n","import React from 'react';\n\nimport { LineEnum } from '../factory/factorySlice';\nimport { FaShoppingCart } from 'react-icons/fa';\nimport styles from './RobotIconActive.module.scss'\nimport { GiMiner, GiSolderingIron } from 'react-icons/gi';\nimport { ImSpinner2 } from 'react-icons/im';\n\n\ninterface IRobotIconActiveProps {\n    line: LineEnum\n}\nconst RobotIconActive: React.FC<IRobotIconActiveProps> = (props) => {\n    const { line } = props;\n\n    let Component;\n    let classIcon = `${styles.RobotIcon} ${styles[`RobotIcon--${line}`]}`\n    switch(line) {\n        case LineEnum.FOO_MINING:\n        case LineEnum.BAR_MINING:\n            Component = GiMiner\n            break;\n        case LineEnum.FOOBAR_CRAFTING:\n            Component = GiSolderingIron;\n            break;\n        case LineEnum.SHOPPING:\n            Component = FaShoppingCart\n            break;\n        default:\n            Component = ImSpinner2\n            classIcon = `${styles.RobotIcon} ${styles[`RobotIcon--spinning`]}`\n    }\n    \n    return <Component className={classIcon}/>\n }\n\n\nexport default RobotIconActive;","import { LineEnum } from \"../factory/factorySlice\"\nimport { Button } from 'react-bootstrap';\nimport styles from './Robot.module.scss';\n\ninterface IButtonChangeLineProps {\n    line: LineEnum;\n    activeLine?: LineEnum;\n    onChangeLine: (line: LineEnum) => any\n}\n\nconst ButtonChangeLine: React.FC<IButtonChangeLineProps> = ({line, activeLine, onChangeLine, children}) => {\n    return <Button aria-label={`go-to-${line}`} \n        className={`${styles.Button} ${styles[`Button--${line}`]}`} \n        disabled={activeLine===line}\n        onClick={() => onChangeLine(line)}\n        >{children}</Button>\n}\n\nexport default ButtonChangeLine;","import React, {useEffect, useCallback, useRef} from 'react';\nimport { ButtonGroup, Card } from 'react-bootstrap';\nimport { IRobot } from '../../interfaces/Robot';\nimport { LineEnum } from '../factory/factorySlice';\nimport { FaRobot } from 'react-icons/fa';\n\nimport styles from './Robot.module.scss';\nimport RobotIconActive from './RobotIconActive';\nimport ButtonChangeLine from './ButtonChangeLine';\n\n/**\n * A robot component recieves a function 'action' which returns a promise\n * It has a single button to perform it's action. \n * The button is disabled while the robot is working\n */\ninterface IRobotProps extends IRobot {\n  action?: (args: {robot: IRobot}) => Promise<any>,\n  changeLine?: (args: {robot: IRobot, line: LineEnum}) => Promise<any>,\n} \n\nconst Robot: React.FC<IRobotProps> = (props) => {\n  \n  // Define action queue as a 'ref' to prevent infinite loop, qctionQueue being modified by the useEffect\n  const actionQueue = useRef<{() : void;}[]>([]);\n  const { activity, busy, changingActivity, changeLine }= props;\n  const pending = busy || changingActivity\n\n  // Set next action in the queue\n  const setNext = (actionToQueue: {() : void;}) => {\n    actionQueue.current.push(actionToQueue)\n  }\n\n  // Execute robot activity\n  const work = useCallback(() => {\n    const { action, ...robot} = props;\n    if(action) {\n      action({robot})\n    }\n  },[props]);\n\n\n  const onChangeLine = (line: LineEnum) => {\n    if(changeLine !== undefined) {\n      const arg = {robot: props, line}\n      if(pending) {\n        setNext(() => {changeLine(arg)})\n      } else {\n        changeLine(arg);\n      }\n    }\n\n  }\n\n  /**\n   * Robot automation\n   * Make robot work automatically on the line, and delay the action 'change line'\n   */\n  useEffect(() => {\n    const getNextAction = () => {\n      const nextAction = actionQueue.current.shift();\n      return nextAction;\n    }\n    // If the robot is available\n    if(!pending) {\n      const nextAction = getNextAction();\n      if(nextAction) {\n        // Perform the next action present in the queue\n        nextAction()\n      }else{\n        // Perform the activity of the current line\n        work()\n      }\n    }\n  },[work, pending])\n\n\n  return <Card role=\"robot\" className={styles.Robot}>\n    <div className={`${styles['Robot-icon']} ${styles[`Robot-icon--${changingActivity?'changing':activity}`]}`}>\n      <FaRobot size={70} />\n      {(activity && busy) ? \n        <RobotIconActive line={activity}/>\n        :\n        <RobotIconActive line={LineEnum.BENCH}/>\n      }\n    </div>\n\n    <div className=\"w-100\">\n      <ButtonGroup size={\"sm\"} className={styles.ButtonGroup} aria-label=\"robot-control\">\n        <ButtonChangeLine line={LineEnum.FOO_MINING} activeLine={activity} onChangeLine={onChangeLine}>Foo</ButtonChangeLine>\n        <ButtonChangeLine line={LineEnum.BAR_MINING} activeLine={activity} onChangeLine={onChangeLine}>Bar</ButtonChangeLine>\n      </ButtonGroup>\n      <ButtonGroup size={\"sm\"} className={styles.ButtonGroup} aria-label=\"robot-control\">\n        <ButtonChangeLine line={LineEnum.FOOBAR_CRAFTING} activeLine={activity} onChangeLine={onChangeLine}>Craft</ButtonChangeLine>\n        <ButtonChangeLine line={LineEnum.SHOPPING} activeLine={activity} onChangeLine={onChangeLine}>Shop</ButtonChangeLine>\n      </ButtonGroup>\n    </div>\n    \n  </Card>\n}\n\nexport default Robot;\n\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { RootState } from '../../../app/store';\nimport { IRobot } from '../../../interfaces/Robot';\nimport Robot from '../../robot/Robot';\nimport { LineEnum, changeLine } from '../factorySlice';\n\nexport interface ILineProps {\n  activityName?: LineEnum,\n  producing?: boolean,\n  activity?: (args: {robot: IRobot}) => Promise<any>,\n  changeLine?: (args: {robot: IRobot, line: LineEnum}) => Promise<any>,\n  robotList: IRobot[]\n}\n\nconst Line: React.FC<ILineProps> = ({ robotList, activity, producing, activityName, changeLine }) => {\n\n  return (<div role=\"line\" aria-label={`line-${activityName}`} className={\"mx-auto my-1\"}>\n    { activityName && <h4 className=\"text-center w-100\">{ activityName }</h4>}\n    {robotList.map((robot, index) => (\n      <Robot key={index} \n        {...robot} \n        action={producing?activity:undefined} \n        changeLine={changeLine} />)\n    )}\n  </div>)\n}\n\nconst mapSateToProps = (state: RootState) => ({\n  producing: state.factory.producing\n})\n\nconst actionCreator = {\n  changeLine\n}\n\nexport default connect(mapSateToProps, actionCreator )(Line);\n\n","import { connect } from \"react-redux\"\nimport { RootState } from \"../../../app/store\";\nimport { LineEnum, mineBar as activity, selectBarMiners } from '../factorySlice'\nimport Line from './Line';\n\nconst mapStateToProps = (state: RootState, ownProps = {}) => ({\n  activityName: LineEnum.BAR_MINING,\n  robotList: selectBarMiners(state)\n});\n\nconst actionCreators = {\n  activity\n}\n\nconst BarMiningLine = connect(mapStateToProps, actionCreators)(Line)\n\nexport default BarMiningLine;","import { connect } from \"react-redux\"\nimport { RootState } from \"../../../app/store\";\nimport {LineEnum, mineFoo as activity, selectFooMiners } from '../factorySlice'\nimport Line from './Line';\n\nconst actionCreators = {\n  activity\n}\n\nconst mapStateToProps = (state: RootState, ownProps = {}) => ({\n  activityName: LineEnum.FOO_MINING,\n  robotList: selectFooMiners(state)\n});\n\nconst FooMiningLine = connect(mapStateToProps, actionCreators)(Line)\n\nexport default FooMiningLine;","import { LineEnum, Constraint } from '../factorySlice'\nimport Line, { ILineProps } from './Line';\nimport { IRobot } from '../../../interfaces/Robot';\nimport { useSelector } from 'react-redux';\n\n\nexport interface ILinePropsT {\n  activityName?: LineEnum,\n  activity?: (args: {robot: IRobot}) => Promise<any>,\n}\n\n// Activate the activity in a Line component according to the constraint\nconst withConstraint = (WrappedComponent: typeof Line, constraint: Constraint): React.FC<ILineProps> => \n  ({ activity, ...rest}) => {\n    const allowActivity = useSelector(constraint)\n    return  <WrappedComponent activity={allowActivity?activity:undefined} {...rest} />;\n  }\n\nexport default withConstraint;;","import { connect } from \"react-redux\"\nimport { RootState } from \"../../../app/store\";\nimport { LineEnum, craftFoobar as activity, selectFoobarCrafters, selectProd } from '../factorySlice'\nimport Line from './Line';\nimport { canCraftFoobar } from './../factorySlice';\nimport withConstraint from \"./withConstraint\";\n\nconst actionCreators = {\n  activity\n}\n\nconst mapStateToProps = (state: RootState, ownProps = {}) => ({\n  activityName: LineEnum.FOOBAR_CRAFTING,\n  prod: selectProd,\n  robotList: selectFoobarCrafters(state)\n});\n\n//Set the crafting constraint\nconst LineWithConstraint = withConstraint(Line, canCraftFoobar);\n\n//Connect the constrained production line with the Foobar crafting action\nconst FoobarCraftingLine = connect(mapStateToProps, actionCreators)(LineWithConstraint); \n\nexport default FoobarCraftingLine;","import { connect } from \"react-redux\"\nimport { RootState } from \"../../../app/store\";\nimport { buyRobot as activity, selectShoppers, canBuyRobot, LineEnum } from '../factorySlice'\nimport Line from './Line';\nimport withConstraint from './withConstraint';\n\nconst actionCreators = {\n  activity\n}\n\nconst mapStateToProps = (state: RootState, ownProps = {}) => ({\n  activityName: LineEnum.SHOPPING,\n  robotList: selectShoppers(state)\n});\n\nconst ShoppingLine = connect(mapStateToProps, actionCreators)(withConstraint(Line, canBuyRobot))\n\nexport default ShoppingLine;","import { connect } from \"react-redux\"\nimport { RootState } from \"../../../app/store\";\nimport { LineEnum, selectBench } from '../factorySlice'\nimport Line from './Line';\n\nconst mapStateToProps = (state: RootState, ownProps = {}) => ({\n    activityName: LineEnum.BENCH,\n    robotList: selectBench(state)\n});\n\n\nconst BenchLine = connect(mapStateToProps)(Line)\n\nexport default BenchLine;","import React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport BarMiningLine from './line/BarMiningLine';\nimport FooMiningLine from './line/FooMiningLine';\nimport FoobarCraftingLine from './line/FoobarCraftingLine';\nimport ShoppingLine from './line/ShoppingLine';\nimport BenchLine from './line/BenchLine';\nimport styles from './Factory.module.scss'\nimport { RootState } from '../../app/store';\nimport { selectProd, selectAll } from './factorySlice';\nimport { connect } from 'react-redux';\n\n\ninterface IFactoryProps {\n  prod: any\n}\n\nconst Factory: React.FC<IFactoryProps> = ({prod}) => {\n  return <>\n    <Row className=\"h-75\">\n      <Col className={styles.LineFooMining}>\n        <FooMiningLine/>\n      </Col>\n      <Col className={styles.LineBarMining}>\n        <BarMiningLine/>\n      </Col>\n      <Col className={styles.LineFoobarCrafting}>\n        <FoobarCraftingLine />\n      </Col>\n      <Col className={styles.LineShopping}>\n        <ShoppingLine />\n      </Col>\n      <Col className={styles.LineBenching}>\n        <BenchLine/>\n      </Col>\n    </Row>\n  </>\n}\n\nconst mapStateToProps = (state: RootState) => ({ \n  prod: selectProd(state),\n  robotMap: selectAll(state)\n})\n\nexport default connect(mapStateToProps)(Factory);","import React from 'react';\nimport {\n  startCounter,\n  stopCounter,\n  selectCount,\n} from './counterSlice';\nimport { RootState } from '../../app/store';\nimport { connect } from 'react-redux';\n\ninterface ICountProps {\n  count: number, \n  start: boolean,\n  startCounter: () => void,\n  stopCounter: () => void\n} \n\nconst Counter: React.FC<ICountProps> = ({count, start, startCounter, stopCounter}) => {\n\n  const mm = Math.round(count/60).toString();\n  const ss = (count%60).toString();\n  const displayDigits = (s: string) => {\n    if(s.length === 0) {\n      return \"00\"\n    } else if(s.length === 1) {\n      return `0${s}`\n    } else {\n      return s\n    }\n  }\n  return (\n    <strong className='test-primary'>\n      {`${displayDigits(mm)}:${displayDigits(ss)}` }\n    </strong>\n  );\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  start: state.factory.producing,\n  count: selectCount(state)\n})\n\nconst actionCreator = {\n  startCounter,\n  stopCounter\n}\n\nexport default connect(mapStateToProps, actionCreator)(Counter)\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { RootState } from '../../app/store';\nimport { FactoryState, selectAll, selectProd, selectWorkshop } from './factorySlice';\nimport { Row, Col, Container } from 'react-bootstrap';\nimport Counter from './../counter/Counter';\nimport { rules } from './../../utils/rules';\n\ntype Prod = FactoryState['prod']\ntype Workshop = FactoryState['workshop']\ntype RobotMap = FactoryState['robotMap']\n\ninterface IDashboardProps {\n  robotMap: RobotMap,\n  prod: Prod,\n  workshop: Workshop\n}\n\nconst Dashboard: React.FC<IDashboardProps> = ({prod, workshop, robotMap}) => {\n  \n  return <Container className=\"fixed-bottom\">\n  <Row className=\"text-center bg-secondary\">\n      <Col>\n        <div><strong>FOO : <span role=\"counter\" aria-label='foo count'>{prod.foo.length}</span></strong></div>\n      </Col>\n      <Col>\n        <div><strong>BAR:  <span role=\"counter\" aria-label='bar count'>{prod.bar.length}</span></strong></div>\n      </Col>\n      <Col>\n        <div><strong>FOOBAR: <span role=\"counter\" aria-label='foobar count'>{prod.foobar.length}</span></strong></div>\n      </Col>\n      <Col>\n        <div><strong>PRICE (FOOBAR): <span role=\"label\" aria-label='foobar price'>{rules.ROBOT_PRICE}</span></strong></div>\n      </Col>\n      <Col>\n        <div><strong>Number of robots: <span role=\"counter\" aria-label='robot count'>{`${Object.entries(robotMap).length} / ${rules.VICTORY}`}</span></strong></div>\n\n      </Col>\n  </Row>\n  <Row className=\"text-center bg-secondary\">\n    <Col><div className=\"w-100\"><Counter/></div></Col>\n  </Row>\n  </Container>\n}\n\nconst mapStateToProp = (state: RootState) => ({\n  robotMap: selectAll(state),\n  prod: selectProd(state),\n  workshop: selectWorkshop(state)\n})\n\nexport default connect(mapStateToProp)(Dashboard)","import { useState } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\"\nimport { rules } from './../../utils/rules';\n\nconst ModalRules: React.FC<any> = () => {\n\n    const [show, setShow] = useState(true);\n\n    const handleClose = () => setShow(false);\n\n    return <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n            <Modal.Title>Foobartory rules</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            <strong>{`Try to get ${rules.VICTORY} robots as fast as you can`}</strong>\n            <div>In each production line of the foobartory robots can perform a different action in a specific time lapse. They can :  </div>\n            <ul>\n                <li>{`Mine 'Foo' on the blue line (cost ${rules.FOO_MINING_TIME/1000} seconds)`}</li>\n                <li>{`Mine 'Bar' on the red line (const ${rules.BAR_MINING_MIN_TIME/1000} to ${rules.BAR_MINING_MAX_TIME/1000} seconds)`}</li>\n                <li>{`Asemble a 'Foo' and a 'Bar' on the purple line to craft a 'Foobar'. ( cost ${rules.FOOBAR_CRAFTING_TIME/1000} seconds, and ${rules.FOOBAR_CRAFTING_CHANCE*100}% chance of success. If it fails, the 'Foo' is lost)`}</li>\n                <li>{`Buy new robots on the green line (cost ${rules.ROBOT_PRICE} 'foobars'), 0 seconds`}</li>\n            </ul>\n            <div>{`Use the buttons of the robot to change production line, the robot needs ${rules.ACTIVITY_SWAPPING_TIME/1000} seconds to change activity. The timer will start when the first robot is on a line.`}</div>\n        </Modal.Body>\n        <Modal.Footer>\n            <Button onClick={handleClose} variant=\"primary\">Let's play</Button>\n        </Modal.Footer>\n    </Modal>\n}\n\nexport default ModalRules;","import { Modal, Button } from \"react-bootstrap\"\nimport { RootState } from \"../../app/store\";\nimport Counter from './../counter/Counter';\nimport { isVictory } from './../factory/factorySlice';\nimport { reset as resetFactory } from \"./../factory/factorySlice\";\nimport { reset as resetCounter } from \"./../counter/counterSlice\";\nimport { connect } from 'react-redux';\n\nconst ModalVictory: React.FC<{show: boolean, resetCounter: any, resetFactory: any }> = ({show, resetCounter, resetFactory}) => {\n\n    const handleClose = () => {\n        resetCounter();\n        resetFactory();\n    }\n\n    return <Modal show={show} onHide={handleClose}>\n        <Modal.Body>\n            <h3 className=\"text-primary\">You Won!</h3>\n            <div className=\"text-primary\"><Counter/></div>\n        </Modal.Body>\n        <Modal.Footer>\n            <Button onClick={handleClose} variant=\"primary\">Play again</Button>\n        </Modal.Footer>\n    </Modal>\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    show: isVictory(state)\n})\n\nconst actionCreator = {\n    resetCounter,\n    resetFactory\n}\n\nexport default connect(mapStateToProps, actionCreator)(ModalVictory);","import React from 'react';\nimport './App.css';\nimport Factory from './features/factory/Factory';\nimport { Container } from 'react-bootstrap';\nimport Dashboard from './features/factory/Dashboard';\nimport ModalRules from './features/modal/ModalRules';\nimport ModalVictory from './features/modal/ModalVictory';\n\nfunction App() {\n  \n  return (\n    <Container className=\"h-100\">\n      <ModalRules/>\n      <ModalVictory/>\n      <Factory />\n      <Dashboard />\n    </Container>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport factoryReducer from '../features/factory/factorySlice';\n\nexport const reducer = {\n  counter: counterReducer,\n  factory: factoryReducer\n}\n\nexport const store = configureStore({\n  reducer: reducer\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}